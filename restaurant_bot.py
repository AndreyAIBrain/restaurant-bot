import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
import os
TOKEN = os.getenv('TOKEN', "7634334499:AAFeR7PB0KTQHR74mPvehZlKaKFmRfk1fIM")
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
processed_callbacks = {}

# –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
CALLBACK_DELIM = "|||"

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_message_ids = {}

# --- –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –º–µ–Ω—é —Å id ---
CATEGORIES = {
    "soups": {"title": "ü•£ –°—É–ø—ã", "dishes": {
        "borscht": {"title": "üçú –ë–æ—Ä—â", "img": "hot/Borscht Soup.jpg", "desc": "–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π ‚Äî –∞—Ä–æ–º–∞—Ç–Ω—ã–π –Ω–∞–≤–∞—Ä–∏—Å—Ç—ã–π —Å—É–ø —Å —Å–æ—á–Ω—ã–º–∏ –∫—É—Å–æ—á–∫–∞–º–∏ –º—è—Å–∞, —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç–æ–π –∏ —Å–≤—ë–∫–ª–æ–π, –≤ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–º –ø—Ä—è–Ω–æ–º –±—É–ª—å–æ–Ω–µ. –ü–æ–¥–∞—ë—Ç—Å—è —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏ –∑–µ–ª–µ–Ω—å—é. –ù–∞—Å—Ç–æ—è—â–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–∏.", "price": 200, "emoji": "ü•£"},
        "beetroot": {"title": "ü•£ –°–≤–µ–∫–æ–ª—å–Ω–∏–∫", "img": "hot/Beetroot soup.jpg", "desc": "–°–≤–µ–∫–æ–ª—å–Ω–∏–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π ‚Äî –ª—ë–≥–∫–∏–π –∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π —Ö–æ–ª–æ–¥–Ω—ã–π —Å—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–∞—Ä–Ω–æ–π —Å–≤—ë–∫–ª—ã, —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –æ–≤–æ—â–∞–º–∏ –∏ –∞—Ä–æ–º–∞—Ç–Ω–æ–π –∑–µ–ª–µ–Ω—å—é. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ç—ë–ø–ª–æ–π –ø–æ–≥–æ–¥—ã. –ü–æ–¥–∞—ë—Ç—Å—è —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏ —è–π—Ü–æ–º.", "price": 150, "emoji": "ü•£"},
        "okroshka": {"title": "üç≤ –û–∫—Ä–æ—à–∫–∞", "img": "hot/Okroshka soup.jpg", "desc": "–û–∫—Ä–æ—à–∫–∞ –Ω–∞ –∫–µ—Ñ–∏—Ä–µ ‚Äî –ª—ë–≥–∫–∏–π –∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π —Ö–æ–ª–æ–¥–Ω—ã–π —Å—É–ø —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –æ–≤–æ—â–∞–º–∏, –∞—Ä–æ–º–∞—Ç–Ω–æ–π –∑–µ–ª–µ–Ω—å—é –∏ –Ω–µ–∂–Ω—ã–º –º—è—Å–æ–º. –ò–¥–µ–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –∂–∞—Ä–∫–æ–≥–æ –¥–Ω—è.", "price": 200, "emoji": "ü•£"},
        "solyanka": {"title": "ü´í –°–æ–ª—è–Ω–∫–∞", "img": "hot/Solyanka soup.jpg", "desc": "–°–æ–ª—è–Ω–∫–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π ‚Äî –≥—É—Å—Ç–æ–π –ø—Ä—è–Ω—ã–π —Å—É–ø —Å –Ω–µ–∂–Ω—ã–º–∏ –∫—É—Å–æ—á–∫–∞–º–∏ –º—è—Å–∞, –∞—Ä–æ–º–∞—Ç–æ–º –∫–æ–ø—á—ë–Ω–æ—Å—Ç–µ–π, —Å–æ–ª—ë–Ω—ã—Ö –æ–≥—É—Ä—Ü–æ–≤ –∏ –º–∞—Å–ª–∏–Ω. –ë–æ–≥–∞—Ç—ã–π –≤–∫—É—Å —Å –ª—ë–≥–∫–æ–π –æ—Å—Ç—Ä–∏–Ω–∫–æ–π. –ü–æ–¥–∞—ë—Ç—Å—è —Å –ª–∏–º–æ–Ω–æ–º –∏ —Å–º–µ—Ç–∞–Ω–æ–π. –ù–∞—Å—Ç–æ—è—â–µ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–∏.", "price": 200, "emoji": "ü•£"},
    }},
    "main": {"title": "üçñ –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞", "dishes": {
        "beef_goulash": {"title": "ü•ò –ì–æ–≤—è–∂–∏–π –≥—É–ª—è—à", "img": "main/Beef goulash.jpg", "desc": "–ì—É–ª—è—à –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã ‚Äî –∞—Ä–æ–º–∞—Ç–Ω–æ–µ –º—è—Å–æ –≤ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–º —Å–æ—É—Å–µ —Å –ø—Ä—è–Ω–æ—Å—Ç—è–º–∏, —Å—ã—Ç–Ω–æ–µ –∏ —Å–æ–≥—Ä–µ–≤–∞—é—â–µ–µ –±–ª—é–¥–æ –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–∏.", "price": 130, "emoji": "üçñ"},
        "beef_patties": {"title": "ü•© –ö–æ—Ç–ª–µ—Ç—ã –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã", "img": "main/Beef patties with gravy.jpg", "desc": "–ù–µ–∂–Ω–µ–π—à–∏–µ –∫–æ—Ç–ª–µ—Ç—ã –∏–∑ —Å–æ—á–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã –ø–æ–¥ –∞—Ä–æ–º–∞—Ç–Ω–æ–π –ø–æ–¥–ª–∏–≤–æ–π ‚Äî —Å—ã—Ç–Ω–æ–µ –∏ –¥–æ–º–∞—à–Ω–µ–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–¥—É–µ—Ç –≤–∫—É—Å–æ–º –∏ —É—é—Ç–æ–º.", "price": 130, "emoji": "üçñ"},
        "buckwheat_beef": {"title": "ü•© –ì—Ä–µ—á–∫–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "img": "main/Buckwheat with beef patties and gravy.jpg", "desc": "–ì—Ä–µ—á–∫–∞ —Å –≥–æ–≤—è–∂—å–∏–º–∏ –∫–æ—Ç–ª–µ—Ç–∞–º–∏ –∏ –ø–æ–¥–ª–∏–≤–æ–π ‚Äî —Å—ã—Ç–Ω–æ–µ –∏ –∞—Ä–æ–º–∞—Ç–Ω–æ–µ –±–ª—é–¥–æ: —Ä–∞—Å—Å—ã–ø—á–∞—Ç–∞—è –≥—Ä–µ—á–∫–∞, —Å–æ—á–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã –∏ –Ω–µ–∂–Ω–∞—è –¥–æ–º–∞—à–Ω—è—è –ø–æ–¥–ª–∏–≤–∞. –ù–∞—Å—Ç–æ—è—â–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è –≤–∫—É—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞.", "price": 220, "emoji": "üçñ"},
        "buckwheat_chicken": {"title": "üçó –ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π", "img": "main/Buckwheat with chicken goulash.jpg", "desc": "–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏–Ω—ã–º –≥—É–ª—è—à–æ–º ‚Äî –Ω–µ–∂–Ω–æ–µ –∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ –≤ –ø—Ä—è–Ω–æ–º —Å–æ—É—Å–µ —Å —Ä–∞—Å—Å—ã–ø—á–∞—Ç–æ–π –≥—Ä–µ—á–∫–æ–π. –°—ã—Ç–Ω–æ–µ –∏ —É—é—Ç–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –≤–∫—É—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞.", "price": 220, "emoji": "üçó"},
        "mashed_beef": {"title": "ü•© –ü—é—Ä–µ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "img": "main/Mashed potatoes with beef patties and gravy.jpg", "desc": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ —Å –∫–æ—Ç–ª–µ—Ç–∞–º–∏ –∏–∑ —Å–æ—á–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã –ø–æ–¥ –Ω–µ–∂–Ω–æ–π –ø–æ–¥–ª–∏–≤–æ–π ‚Äî —Å—ã—Ç–Ω–æ–µ –∏ –¥–æ–º–∞—à–Ω–µ–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—Ä–∏—Ç —Ç–µ–ø–ª–æ –∏ –≤–∫—É—Å –¥–µ—Ç—Å—Ç–≤–∞.", "price": 220, "emoji": "üçñ"},
        "mashed_chicken": {"title": "üçó –ü—é—Ä–µ —Å –∫—É—Ä–∏—Ü–µ–π", "img": "main/Mashed potatoes with chicken goulash.jpg", "desc": "–ü—é—Ä–µ —Å –∫—É—Ä–∏–Ω—ã–º –≥—É–ª—è—à–æ–º ‚Äî –Ω–µ–∂–Ω–æ–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ —Å —Å–æ—á–Ω—ã–º –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ –≤ –∞—Ä–æ–º–∞—Ç–Ω–æ–º —Å–æ—É—Å–µ. –í–∫—É—Å–Ω–æ–µ –∏ —Å—ã—Ç–Ω–æ–µ –±–ª—é–¥–æ –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–∏.", "price": 220, "emoji": "üçó"},
        "mashed_gravy": {"title": "ü•£ –ü—é—Ä–µ —Å –ø–æ–¥–ª–∏–≤–æ–π", "img": "main/Mashed potatoes with gravy.jpg", "desc": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ —Å –ø–æ–¥–ª–∏–≤–æ–π –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã ‚Äî –Ω–µ–∂–Ω–æ–µ –ø—é—Ä–µ –ø–æ–¥ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –º—è—Å–Ω—ã–º —Å–æ—É—Å–æ–º, —Å–æ–≥—Ä–µ–≤–∞—é—â–µ–µ –∏ —Å—ã—Ç–Ω–æ–µ –±–ª—é–¥–æ –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–∏.", "price": 220, "emoji": "ü•£"},
        "mashed": {"title": "ü•î –ü—é—Ä–µ", "img": "main/Mashed potatoes.jpg", "desc": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ ‚Äî –Ω–µ–∂–Ω–æ–µ –∏ –≤–æ–∑–¥—É—à–Ω–æ–µ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É, –∏–¥–µ–∞–ª—å–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ª—é–±–æ–º—É –±–ª—é–¥—É.", "price": 100, "emoji": "ü•î"},
        "buckwheat": {"title": "üåæ –ì—Ä–µ—á–∫–∞", "img": "main/Open buckwheat.jpg", "desc": "–ì—Ä–µ—á–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è ‚Äî –ª—ë–≥–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –≥–∞—Ä–Ω–∏—Ä —Å –Ω–µ–∂–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –∞—Ä–æ–º–∞—Ç–æ–º, –∏–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω—è—é—â–∏–π –ª—é–±–æ–µ –±–ª—é–¥–æ.", "price": 100, "emoji": "üåæ"},
        "spaghetti_beef": {"title": "üçù –°–ø–∞–≥–µ—Ç—Ç–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "img": "main/Spaghetti with beef patties and gravy.jpg", "desc": "–°–ø–∞–≥–µ—Ç—Ç–∏ —Å —Å–æ—á–Ω—ã–º–∏ –≥–æ–≤—è–∂—å–∏–º–∏ –∫–æ—Ç–ª–µ—Ç–∞–º–∏ –∏ –Ω–µ–∂–Ω–æ–π –ø–æ–¥–ª–∏–≤–æ–π ‚Äî —Å—ã—Ç–Ω–æ–µ –∏ –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—Ä–∏—Ç –≤–∫—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ —É—é—Ç–∞.", "price": 230, "emoji": "üçù"},
        "spaghetti_chicken": {"title": "üçó –°–ø–∞–≥–µ—Ç—Ç–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "img": "main/Spaghetti with chicken goulash.jpg", "desc": "–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –∫—É—Ä–∏–Ω—ã–º –≥—É–ª—è—à–æ–º ‚Äî –Ω–µ–∂–Ω–∞—è –ø–∞—Å—Ç–∞ —Å —Å–æ—á–Ω—ã–º –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ –≤ –∞—Ä–æ–º–∞—Ç–Ω–æ–º —Å–æ—É—Å–µ. –°—ã—Ç–Ω–æ–µ –∏ –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –æ–±–µ–¥–∞.", "price": 220, "emoji": "üçù"},
        "spaghetti_gravy": {"title": "üßÜ –°–ø–∞–≥–µ—Ç—Ç–∏ —Å –ø–æ–¥–ª–∏–≤–æ–π", "img": "main/Spaghetti with gravy (–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –ø–æ–¥–ª–∏–≤–æ–π –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã).jpg", "desc": "–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –ø–æ–¥–ª–∏–≤–æ–π –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã ‚Äî –Ω–µ–∂–Ω–∞—è –ø–∞—Å—Ç–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –º—è—Å–Ω—ã–º —Å–æ—É—Å–æ–º, —Å—ã—Ç–Ω–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ —É—é—Ç–∞.", "price": 220, "emoji": "üçù"},
        "spaghetti": {"title": "üçù –°–ø–∞–≥–µ—Ç—Ç–∏", "img": "main/Spaghetti.jpg", "desc": "–°–ø–∞–≥–µ—Ç—Ç–∏ ‚Äî –Ω–µ–∂–Ω—ã–µ, –∏–¥–µ–∞–ª—å–Ω–æ —Å–≤–∞—Ä–µ–Ω–Ω—ã–µ –º–∞–∫–∞—Ä–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç –æ—Ç–ª–∏—á–Ω–æ–π –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å–æ—É—Å–∞ –∏–ª–∏ –≥–∞—Ä–Ω–∏—Ä–æ–º –∫ –ª—é–±–æ–º—É –±–ª—é–¥—É.", "price": 100, "emoji": "üçù"},
    }},
    "salads": {"title": "ü•ó –°–∞–ª–∞—Ç—ã", "dishes": {
        "crab": {"title": "ü¶Ä –ö—Ä–∞–±–æ–≤—ã–π —Å–∞–ª–∞—Ç", "img": "salads/Crab salad.jpg", "desc": "–ö—Ä–∞–±–æ–≤—ã–π —Å–∞–ª–∞—Ç ‚Äî –Ω–µ–∂–Ω—ã–π –∏ —Å–æ—á–Ω—ã–π, —Å –∫—Ä–∞–±–æ–≤—ã–º–∏ –ø–∞–ª–æ—á–∫–∞–º–∏, —è–π—Ü–æ–º, –∫—É–∫—É—Ä—É–∑–æ–π –∏ —Å–≤–µ–∂–∏–º –æ–≥—É—Ä—Ü–æ–º. –ó–∞–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–¥–∞—ë—Ç –±–ª—é–¥—É –≤–æ–∑–¥—É—à–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –∏ —Ç–æ–Ω–∫–∏–π –≤–∫—É—Å. –ö–ª–∞—Å—Å–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–∏.", "price": 150, "emoji": "ü•ó"},
        "olivier": {"title": "ü•ö –°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ", "img": "salads/Olivier salad.jpg", "desc": "–°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ —Å –∫–æ–ª–±–∞—Å–æ–π ‚Äî –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–π –∏ —Å—ã—Ç–Ω—ã–π, —Å –Ω–µ–∂–Ω—ã–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º, —Å–æ—á–Ω—ã–º –æ–≥—É—Ä—á–∏–∫–æ–º, –∑–µ–ª—ë–Ω—ã–º –≥–æ—Ä–æ—à–∫–æ–º –∏ –∞—Ä–æ–º–∞—Ç–Ω–æ–π –∫–æ–ª–±–∞—Å–æ–π. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∫—É—Å, –∑–Ω–∞–∫–æ–º—ã–π –∏ –ª—é–±–∏–º—ã–π —Å –¥–µ—Ç—Å—Ç–≤–∞.", "price": 150, "emoji": "ü•ó"},
        "summer": {"title": "ü•í –õ–µ—Ç–Ω–∏–π —Å–∞–ª–∞—Ç", "img": "salads/Summer salad.jpg", "desc": "–õ–µ—Ç–Ω–∏–π —Å–∞–ª–∞—Ç —Å —Å–ª–∞–¥–∫–∏–º –ª—É–∫–æ–º, —Å–æ—á–Ω—ã–º –ø–µ—Ä—Ü–µ–º –∏ —Å–ø–µ–ª—ã–º–∏ —Ç–æ–º–∞—Ç–∞–º–∏ —á–µ—Ä—Ä–∏ ‚Äî —Å–≤–µ–∂–∏–π, —è—Ä–∫–∏–π –∏ –∞—Ä–æ–º–∞—Ç–Ω—ã–π. –õ—ë–≥–∫–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –≤–∫—É—Å –æ–≤–æ—â–µ–π. –ù–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –∫—É—Å–æ—á–∫–µ!", "price": 150, "emoji": "ü•í"},
    }},
    "snacks": {"title": "ü•™ –ó–∞–∫—É—Å–∫–∏", "dishes": {
        "nuggets": {"title": "üçó –ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã", "img": "snacks/Chicken nuggets.jpg", "desc": "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã ‚Äî —Ö—Ä—É—Å—Ç—è—â–∏–µ —Å–Ω–∞—Ä—É–∂–∏ –∏ —Å–æ—á–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏, –∞–ø–ø–µ—Ç–∏—Ç–Ω–∞—è –∑–∞–∫—É—Å–∫–∞, –ª—é–±–∏–º–∞—è –∏ –≤–∑—Ä–æ—Å–ª—ã–º–∏, –∏ –¥–µ—Ç—å–º–∏.", "price": 100, "emoji": "üçó"},
        "greens": {"title": "ü•¨ –°–≤–µ–∂–∞—è –∑–µ–ª–µ–Ω—å", "img": "snacks/Fresh greens.jpg", "desc": "–ê—Å—Å–æ—Ä—Ç–∏ —Å–≤–µ–∂–µ–π –∑–µ–ª–µ–Ω–∏.", "price": 30, "emoji": "ü•¨"},
        "pickles": {"title": "ü•í –î–æ–º–∞—à–Ω–∏–µ —Å–æ–ª—ë–Ω—ã–µ –æ–≥—É—Ä—Ü—ã", "img": "snacks/Homemade pickled cucumbers.jpg", "desc": "–°–æ–ª—ë–Ω—ã–µ –æ–≥—É—Ä—Ü—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.", "price": 100, "emoji": "ü•í"},
        "pancakes": {"title": "ü•î –î—Ä–∞–Ω–∏–∫–∏", "img": "snacks/Potato pancakes.jpg", "desc": "–î—Ä–∞–Ω–∏–∫–∏ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ ‚Äî –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–µ, —Ö—Ä—É—Å—Ç—è—â–∏–µ —Å–Ω–∞—Ä—É–∂–∏ –∏ –º—è–≥–∫–∏–µ –≤–Ω—É—Ç—Ä–∏, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–æ–º–∞—à–Ω–∏–µ –ª–µ–ø—ë—à–∫–∏ –∏–∑ —Ç—ë—Ä—Ç–æ–≥–æ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è.", "price": 100, "emoji": "ü•î"},
    }},
    "drinks": {"title": "ü•§ –ù–∞–ø–∏—Ç–∫–∏", "dishes": {
        "water": {"title": "üíß –í–æ–¥–∞", "img": "drinks/Water.jpg", "desc": "–ü–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ –±–µ–∑ –≥–∞–∑–∞.", "price": 40, "emoji": "üíß"},
        "coca_cola": {"title": "ü•§ –ö–æ–∫–∞-–ö–æ–ª–∞", "img": "drinks/Coca-Cola.jpg", "desc": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è Coca-Cola.", "price": 50, "emoji": "ü•§"},
        "sprite": {"title": "üçê –°–ø—Ä–∞–π—Ç", "img": "drinks/Sprite.jpg", "desc": "Sprite", "price": 50, "emoji": "ü•§"},
        "fanta": {"title": "üçä –§–∞–Ω—Ç–∞", "img": "drinks/Fanta.jpg", "desc": "Fanta —Å –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–º –≤–∫—É—Å–æ–º.", "price": 50, "emoji": "ü•§"},
        "mango_juice": {"title": "ü•≠ –ú–∞–Ω–≥–æ–≤—ã–π —Å–æ–∫", "img": "drinks/MANGO JUICE.jpg", "desc": "–°–æ–∫ –∏–∑ –º–∞–Ω–≥–æ.", "price": 140, "emoji": "ü•≠"},
        "passion_fruit_juice": {"title": "ü•≠ –°–æ–∫ –º–∞—Ä–∞–∫—É–π–∏", "img": "drinks/PASSION FRUIT JUICE.jpg", "desc": "–°–æ–∫ –∏–∑ –º–∞—Ä–∞–∫—É–π–∏.", "price": 140, "emoji": "üçπ"},
        "tomato_juice": {"title": "üçÖ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ–∫", "img": "drinks/Tomato JUICE.jpg", "desc": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ–∫.", "price": 140, "emoji": "üçÖ"},
    }},
    "sauces": {"title": "ü•´ –°–æ—É—Å—ã", "dishes": {
        "ketchup": {"title": "üçÖ –ö–µ—Ç—á—É–ø", "img": "sauces/Ketchup.jpg", "desc": "–ö–µ—Ç—á—É–ø —Ç–æ–º–∞—Ç–Ω—ã–π.", "price": 25, "emoji": "ü•´"},
        "mayo": {"title": "ü•ö –ú–∞–π–æ–Ω–µ–∑", "img": "sauces/Mayonnaise.jpg", "desc": "–ú–∞–π–æ–Ω–µ–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π.", "price": 25, "emoji": "ü•õ"},
        "sour_cream": {"title": "ü•õ –°–º–µ—Ç–∞–Ω–∞", "img": "sauces/Sour cream.jpg", "desc": "–°–º–µ—Ç–∞–Ω–∞ –¥–æ–º–∞—à–Ω—è—è.", "price": 30, "emoji": "ü•õ"},
    }},
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
user_states = {}
user_order_data = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ ---
def get_cart_total(user_id):
    cart = get_user_cart(user_id)
    total = 0
    for item in cart:
        dish = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']]
        if 'price' in dish:
            total += dish['price'] * item.get('count', 1)
    return total

# --- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ ---
def get_main_menu_inline():
    markup = InlineKeyboardMarkup(row_width=1)
    for cat_id, cat in CATEGORIES.items():
        markup.add(InlineKeyboardButton(cat['title'], callback_data=f"cat_{cat_id}"))
    markup.add(InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="ignore"))
    markup.add(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
    markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    return markup

def get_category_inline(cat_id):
    markup = InlineKeyboardMarkup(row_width=1)
    for dish_id, dish in CATEGORIES[cat_id]['dishes'].items():
        button_text = dish['title']
        markup.add(InlineKeyboardButton(button_text, callback_data=f"dish_{cat_id}_{dish_id}"))
    markup.add(InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="ignore"))
    markup.add(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
    markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return markup

def get_dish_inline(cat_id, dish_id):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{cat_id}_{dish_id}"))
    markup.add(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
    markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_from_photo_{cat_id}"))
    return markup

def get_cart_inline(user_id):
    markup = InlineKeyboardMarkup(row_width=1)
    cart = get_user_cart(user_id)
    if cart:
        markup.add(InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="place_order"))
        markup.add(InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return markup

def get_confirm_order_inline():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_cart"))
    return markup

def show_or_replace_message(bot, chat_id, message_id, text, reply_markup=None):
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup)
    except Exception:
        try:
            bot.delete_message(chat_id, message_id)
        except Exception:
            pass
        sent = bot.send_message(chat_id, text, reply_markup=reply_markup)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id
        if chat_id not in user_message_ids:
            user_message_ids[chat_id] = []
        user_message_ids[chat_id].append(sent.message_id)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è send_photo:
def send_photo_and_save_id(chat_id, photo, caption, reply_markup=None):
    sent = bot.send_photo(chat_id, photo, caption=caption, reply_markup=reply_markup)
    if chat_id not in user_message_ids:
        user_message_ids[chat_id] = []
    user_message_ids[chat_id].append(sent.message_id)
    return sent

# --- –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–Ω–æ–ø–æ–∫ ---
def notify_stale_callback(call):
    bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ!")

# --- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def show_main_menu_inline(call):
    show_or_replace_message(
        bot,
        call.message.chat.id,
        call.message.message_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        get_main_menu_inline()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def show_category_inline(call):
    delete_user_messages(call.message.chat.id)
    cat_id = call.data[4:]
    if cat_id in CATEGORIES:
        show_or_replace_message(
            bot,
            call.message.chat.id,
            call.message.message_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORIES[cat_id]['title']}':",
            get_category_inline(cat_id)
        )
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("dish_"))
def show_dish_inline(call):
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    _, cat_id, dish_id = call.data.split("_", 2)
    if cat_id in CATEGORIES and dish_id in CATEGORIES[cat_id]['dishes']:
        dish = CATEGORIES[cat_id]['dishes'][dish_id]
        full_path = os.path.join(os.getcwd(), dish['img'])
        if os.path.exists(full_path):
            caption = f"üçΩÔ∏è {dish['title']}"
            if 'desc' in dish:
                caption += f"\n\n{dish['desc']}"
            if 'price' in dish:
                caption += f"\n\n–¶–µ–Ω–∞: {dish['price']} –±–∞—Ç"
            with open(full_path, 'rb') as photo:
                markup = get_dish_inline(cat_id, dish_id)
                send_photo_and_save_id(call.message.chat.id, photo, caption=caption, reply_markup=markup)
        else:
            bot.answer_callback_query(call.id, f"–§–æ—Ç–æ –¥–ª—è –±–ª—é–¥–∞ '{dish['title']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data == "view_cart")
def show_cart_inline(call):
    cart_text = get_cart_text(call.message.chat.id)
    markup = get_cart_inline(call.message.chat.id)
    show_or_replace_message(bot, call.message.chat.id, call.message.message_id, cart_text, markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def clear_cart_inline(call):
    clear_cart(call.message.chat.id)
    markup = get_cart_inline(call.message.chat.id)
    show_or_replace_message(bot, call.message.chat.id, call.message.message_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", markup)
    bot.answer_callback_query(call.id, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

@bot.callback_query_handler(func=lambda call: call.data == "place_order")
def place_order_inline(call):
    cart = get_user_cart(call.message.chat.id)
    if not cart:
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    order_text = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    total = 0
    total_count = 0
    for i, item in enumerate(cart, 1):
        cat = CATEGORIES[item['cat_id']]['title']
        dish = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']]['title']
        price = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']].get('price', 0)
        count = item.get('count', 1)
        subtotal = price * count
        total += subtotal
        total_count += count
        order_text += f"{i}. {dish} ({cat}) ‚Äî {count} —à—Ç. √ó {price} = {subtotal} –±–∞—Ç\n"
    order_text += f"\n–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(cart)}"
    order_text += f"\n–í—Å–µ–≥–æ –±–ª—é–¥: {total_count}"
    order_text += f"\n–ò—Ç–æ–≥–æ: {total} –±–∞—Ç"
    markup = get_confirm_order_inline()
    show_or_replace_message(bot, call.message.chat.id, call.message.message_id, order_text, markup)
    bot.answer_callback_query(call.id)
    user_states[call.message.chat.id] = 'awaiting_confirm'

@bot.callback_query_handler(func=lambda call: call.data == "confirm_order")
def confirm_order_inline(call):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    chat_id = call.message.chat.id
    for msg_id in user_message_ids.get(chat_id, []):
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    user_message_ids[chat_id] = []
    user_states[chat_id] = 'awaiting_name'
    user_order_data[chat_id] = {}
    sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    user_message_ids[chat_id].append(sent.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main_inline(call):
    delete_user_messages(call.message.chat.id)
    show_or_replace_message(
        bot,
        call.message.chat.id,
        call.message.message_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        get_main_menu_inline()
    )
    bot.answer_callback_query(call.id)

def send_add_to_cart_notification(call, dish_name, count, subtotal):
    bot.answer_callback_query(
        call.id,
        f"{dish_name} ‚Äî {count} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω–µ (–Ω–∞ {subtotal} –±–∞—Ç)"
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_"))
def add_to_cart_inline(call):
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞!
    _, cat_id, dish_id = call.data.split("_", 2)
    if cat_id in CATEGORIES and dish_id in CATEGORIES[cat_id]['dishes']:
        dish = CATEGORIES[cat_id]['dishes'][dish_id]
        dish_name = dish['title']
        add_to_cart(call.message.chat.id, cat_id, dish_id)
        cart = get_user_cart(call.message.chat.id)
        count = 1
        for item in cart:
            if item['cat_id'] == cat_id and item['dish_id'] == dish_id:
                count = item.get('count', 1)
                break
        price = dish.get('price', 0)
        subtotal = price * count
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"add_{cat_id}_{dish_id}"))
        markup.add(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
        markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_from_photo_{cat_id}"))
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        bot.answer_callback_query(
            call.id,
            f"{dish_name} ‚Äî {count} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω–µ (–Ω–∞ {subtotal} –±–∞—Ç)"
        )
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

# --- Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_from_photo_"))
def back_from_photo_inline(call):
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞ (—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    cat_id = call.data.replace("back_from_photo_", "")
    if cat_id in CATEGORIES:
        show_or_replace_message(
            bot,
            call.message.chat.id,
            call.message.message_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORIES[cat_id]['title']}':",
            get_category_inline(cat_id)
        )
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def get_menu_inline():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("üçΩÔ∏è –ú–µ–Ω—é", callback_data="main_menu"))
    return markup

welcome_message_ids = {}

@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–¢—ã –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤–∫—É—Å –∏ —É—é—Ç –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–∏.\n"
        "–£ –Ω–∞—Å —Ç—ë–ø–ª–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —â–µ–¥—Ä—ã–µ –ø–æ—Ä—Ü–∏–∏ –∏ –∑–∞–±–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ üòã\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ü´∂\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞!"
    )
    old_msg_id = welcome_message_ids.get(message.chat.id)
    if old_msg_id:
        try:
            bot.delete_message(message.chat.id, old_msg_id)
        except Exception:
            pass
    sent = bot.send_message(message.chat.id, welcome_text, reply_markup=get_menu_inline())
    welcome_message_ids[message.chat.id] = sent.message_id

@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def back_to_start_inline(call):
    delete_user_messages(call.message.chat.id)
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–¢—ã –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤–∫—É—Å –∏ —É—é—Ç –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–∏.\n"
        "–£ –Ω–∞—Å —Ç—ë–ø–ª–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —â–µ–¥—Ä—ã–µ –ø–æ—Ä—Ü–∏–∏ –∏ –∑–∞–±–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ üòã\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞!"
    )
    show_or_replace_message(bot, call.message.chat.id, call.message.message_id, welcome_text, get_menu_inline())
    bot.answer_callback_query(call.id)

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_name')
def get_name(message):
    user_order_data[message.chat.id]['name'] = message.text.strip()
    user_states[message.chat.id] = 'awaiting_location'
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ + –ø–æ–¥—Å–∫–∞–∑–∫–∞
    geo_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    geo_markup.add(KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True))
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º:\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=geo_markup
    )

@bot.message_handler(content_types=['location'])
def get_location(message):
    if user_states.get(message.chat.id) == 'awaiting_location':
        user_order_data[message.chat.id]['location'] = message.location
        user = message.from_user
        user_order_data[message.chat.id]['telegram_username'] = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        user_order_data[message.chat.id]['telegram_name'] = f"{user.first_name} {user.last_name or ''}".strip()
        name = user_order_data[message.chat.id].get('name', '-')
        telegram_username = user_order_data[message.chat.id].get('telegram_username', '-')
        telegram_name = user_order_data[message.chat.id].get('telegram_name', '-')
        location = user_order_data[message.chat.id].get('location', None)
        total = get_cart_total(message.chat.id)
        admin_ids = [7024016148, 6066191329]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
        order_info = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–ò–º—è: {name}\nTelegram: @{telegram_username}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {telegram_name}\n"
        cart = get_user_cart(message.chat.id)
        if cart:
            order_info += "\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            for i, item in enumerate(cart, 1):
                cat = CATEGORIES[item['cat_id']]['title']
                dish = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']]['title']
                price = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']].get('price', 0)
                count = item.get('count', 1)
                subtotal = price * count
                order_info += f"{i}. {dish} ({cat}) ‚Äî {count} —à—Ç. √ó {price} = {subtotal} –±–∞—Ç\n"
            order_info += f"\n–ò—Ç–æ–≥–æ: {total} –±–∞—Ç"
        if location:
            order_info += f"\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location.latitude}, {location.longitude}"
        clear_cart(message.chat.id)
        user_states.pop(message.chat.id, None)
        user_order_data.pop(message.chat.id, None)
        # –°–Ω–∞—á–∞–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –ø–æ—Ç–æ–º –º–µ–Ω—é
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!üòãü§åüèº"
        )
        bot.send_message(
            message.chat.id,
            "–ú–µ–Ω—é:",
            reply_markup=get_main_menu_inline()
        )
        for admin_id in admin_ids:
            bot.send_message(admin_id, order_info)
            if location:
                bot.send_location(admin_id, location.latitude, location.longitude)

# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ ---
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_location')
def get_text_address(message):
    user_order_data[message.chat.id]['address'] = message.text.strip()
    user = message.from_user
    user_order_data[message.chat.id]['telegram_username'] = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_order_data[message.chat.id]['telegram_name'] = f"{user.first_name} {user.last_name or ''}".strip()
    name = user_order_data[message.chat.id].get('name', '-')
    telegram_username = user_order_data[message.chat.id].get('telegram_username', '-')
    telegram_name = user_order_data[message.chat.id].get('telegram_name', '-')
    address = user_order_data[message.chat.id].get('address', '-')
    total = get_cart_total(message.chat.id)
    admin_ids = [7024016148, 6066191329]
    order_info = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–ò–º—è: {name}\nTelegram: @{telegram_username}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {telegram_name}\n"
    cart = get_user_cart(message.chat.id)
    if cart:
        order_info += "\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        for i, item in enumerate(cart, 1):
            cat = CATEGORIES[item['cat_id']]['title']
            dish = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']]['title']
            price = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']].get('price', 0)
            count = item.get('count', 1)
            subtotal = price * count
            order_info += f"{i}. {dish} ({cat}) ‚Äî {count} —à—Ç. √ó {price} = {subtotal} –±–∞—Ç\n"
        order_info += f"\n–ò—Ç–æ–≥–æ: {total} –±–∞—Ç"
    if address:
        order_info += f"\n–ê–¥—Ä–µ—Å: {address}"
    clear_cart(message.chat.id)
    user_states.pop(message.chat.id, None)
    user_order_data.pop(message.chat.id, None)
    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!üòãü§åüèº"
    )
    bot.send_message(
        message.chat.id,
        "–ú–µ–Ω—é:",
        reply_markup=get_main_menu_inline()
    )
    for admin_id in admin_ids:
        bot.send_message(admin_id, order_info)

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–Ω—é/–±–ª—é–¥–æ–º ---
def delete_user_messages(chat_id):
    for msg_id in user_message_ids.get(chat_id, []):
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    user_message_ids[chat_id] = []

# --- –ö–æ—Ä–∑–∏–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ---
def get_user_cart(user_id):
    if user_id not in user_carts:
        user_carts[user_id] = []
    return user_carts[user_id]

def add_to_cart(user_id, cat_id, dish_id):
    cart = get_user_cart(user_id)
    for item in cart:
        if item['cat_id'] == cat_id and item['dish_id'] == dish_id:
            item['count'] += 1
            user_carts[user_id] = cart
            return True
    cart.append({'cat_id': cat_id, 'dish_id': dish_id, 'count': 1})
    user_carts[user_id] = cart
    return True

def clear_cart(user_id):
    user_carts[user_id] = []

def get_cart_text(user_id):
    cart = get_user_cart(user_id)
    if not cart:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    total_count = 0
    for i, item in enumerate(cart, 1):
        cat = CATEGORIES[item['cat_id']]['title']
        dish = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']]['title']
        price = CATEGORIES[item['cat_id']]['dishes'][item['dish_id']].get('price', 0)
        count = item.get('count', 1)
        subtotal = price * count
        total += subtotal
        total_count += count
        text += f"{i}. {dish} ({cat}) ‚Äî {count} —à—Ç. √ó {price} = {subtotal} –±–∞—Ç\n"
    text += f"\n–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(cart)}"
    text += f"\n–í—Å–µ–≥–æ –±–ª—é–¥: {total_count}"
    text += f"\n–ò—Ç–æ–≥–æ: {total} –±–∞—Ç"
    return text

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        bot.delete_webhook()
        print("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    time.sleep(3)
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        bot.polling(none_stop=True, timeout=60)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        
        